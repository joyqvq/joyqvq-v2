<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Joy&#39;s Personal Website</title>
    <link>https://joywang.co/posts/</link>
    <description>Recent content in Posts on Joy&#39;s Personal Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>me@example.com (joy)</managingEditor>
    <webMaster>me@example.com (joy)</webMaster>
    <copyright>2021 Janne Kemppainen All rights reserved</copyright>
    <lastBuildDate>Sun, 30 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://joywang.co/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>This Week in Cryptography Research June 30</title>
      <link>https://joywang.co/2024/06/30/2024-06-30-this-week-in-crypto-research/</link>
      <pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2024/06/30/2024-06-30-this-week-in-crypto-research/</guid>
      <description>Welcome to the third issue of the cryptography research weekly! This week I read about adaptor signature contruction
Adaptor Signatures: New Security Definition and A Generic Construction for NP Relations(Link) I have read about adaptor signatures in Bitcoin land a while ago, this paper offered a generic construction that is not only particular to ECDSA or Schnorr.
An Adaptor signature scheme is defined based on a relation R where there is a signer and a receiver.</description>
    </item>
    
    <item>
      <title>This Week in Cryptography Research June 22</title>
      <link>https://joywang.co/2024/06/22/2024-06-22-this-week-in-crypto-research/</link>
      <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2024/06/22/2024-06-22-this-week-in-crypto-research/</guid>
      <description>Welcome to the second issue of the cryptography research weekly! This week I read about randomness implementation considerations and encryption techniques.
VRaaS: Verifiable Randomness as a Service on Blockchains(Link) This paper provides a formalized framework for verifiable randomness that captures core features such as unbiasability, unpredictability, and public verifiability but also the onchain components design. The randomness requester first sends a request to smart contract and records a unique ID onchain.</description>
    </item>
    
    <item>
      <title>This Week in Cryptography Research June 16</title>
      <link>https://joywang.co/2024/06/16/2024-06-16-this-week-in-crypto-research/</link>
      <pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2024/06/16/2024-06-16-this-week-in-crypto-research/</guid>
      <description>This is the augural issue for This Week in Cryptography Research. I hope to summarize 2 papers I read this week and highlight the main contributions. I focus on papers that are most interesting to me, and has a strong preference to practical applications and constructions over theories and attacks.
Atomic and Fair Data Exchange via Blockchain (Link) I came across this paper while reading about various data storage solutions related to the blockchain.</description>
    </item>
    
    <item>
      <title>Verifiable Delay Function Explained with Applications</title>
      <link>https://joywang.co/2024/01/17/2024-01-17-vdf-explained/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2024/01/17/2024-01-17-vdf-explained/</guid>
      <description>Verifiable Delay Function Explained with Applications Verifiable Delay Function is a useful cryptographic primitive that has a wide range of applications such as randomness beacon and proof of replication. Similar to zero knowledge proving systems, the output of a verifiable delay function is slow to compute and requires sequential computation, but can be efficiently verified. Unlike Proof of Work that parallel work can be performed across different machines, VDF is required to perform sequentially and cannot be parallelized.</description>
    </item>
    
    <item>
      <title>A Tale of Privacy-focused Transactions</title>
      <link>https://joywang.co/2023/09/04/2023-07-15-tale-of-privacy-tx/</link>
      <pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2023/09/04/2023-07-15-tale-of-privacy-tx/</guid>
      <description>A Tale of Privacy-focused Transactions Blockchains had been developed under one public verifiable state machine, where all transactions are sequenced globally under consensus. What comes as a tradeoff to providing a consistent and shared state, blockchain suffers from the fact that all of the transactions on the blockchain are viewable from the public ledger by anyone. The privacy and security concerns had posed many risks and hindered adoption of cryptocurrencies as digital cash.</description>
    </item>
    
    <item>
      <title>Groth16 Explained from the Beginning</title>
      <link>https://joywang.co/2023/06/10/2023-06-10-groth16/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2023/06/10/2023-06-10-groth16/</guid>
      <description>Overview of Proving systems and Where does Groth16 fit in The design space of zero knowledge proving systems is quite broad. Generally speaking, the choice of a proving system depends on the combinations of the polynomial commitment scheme and the interactive proof technique:
 Choice of polynomial commitments   Pairing based (e.g. KZG): Requires trusted setup Discrete log based (e.g. Bulletproof) Hashing (e.g. FRI)  Choice of polynomial interactive proof (IOP)   IP-based MIP-based Constant round IOP  Among these choices we study Groth16 in this essay with its main contributions in short verification time.</description>
    </item>
    
    <item>
      <title>Practical Overview on Secure Multi-Party Computation for Custody</title>
      <link>https://joywang.co/2023/04/28/2023-04-28-practical-mpc-for-custody/</link>
      <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2023/04/28/2023-04-28-practical-mpc-for-custody/</guid>
      <description>An overview of Secure Multi-Party Computation use cases in cryptocurrency. Multi-Party Computation describes the techniques that a number of parties with private inputs wish to compute a joint function of their inputs, without revealing anything but the output. A simple example is A and B would like to find who has more money in the bank account without needing to tell each other their bank account balance. Here we would like to learn the output of max(balance_a, balance_b) and balance_a and balance_b are the private inputs.</description>
    </item>
    
    <item>
      <title>Account Abstraction, Alternatives to Private Key Wallets</title>
      <link>https://joywang.co/2023/03/02/2023-03-02-account-abstraction/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2023/03/02/2023-03-02-account-abstraction/</guid>
      <description>A practical technical review on account abstractions and its implementation. Account abstraction is a recently deployed feature on Ethereum network. Previously, funds can only be spent by providing a valid signature over the transaction data. Under the private key wallet model, a digital signature attests as a witness for a transaction to be valid, and it is considered non-repudiable and final.
However, such authentication methods can be considered as one of the barriers to entry when onboarding users given the key handling intricacies, and it is rather restrictive for new use cases of on-chain activities.</description>
    </item>
    
    <item>
      <title>A Look at Threshold Signature and Multisig Construction</title>
      <link>https://joywang.co/2023/01/19/2023-01-19-thresholdsig-multisig/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2023/01/19/2023-01-19-thresholdsig-multisig/</guid>
      <description>Creating threshold signature and multisigs with Schnorr, how are they different and when to use which? Threshold signature and multisig are two important cryptographic constructions that are available for the majority of cryptocurrency protocols. In a single signature model, it assumes that a single signer can produce a signature and submit to the protocol for verification. This makes the single private key the single point of failure, since the compromise of this key means 100% loss of funds.</description>
    </item>
    
    <item>
      <title>Annotations and Discussions on Key Derivation</title>
      <link>https://joywang.co/2022/12/29/2022-12-29-key-derivation/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2022/12/29/2022-12-29-key-derivation/</guid>
      <description>A closer look on key derivations with relation to curve operations. This post is a more general discussion on key derivation applying to broader cryptocurrency usage. You can find my writing on the Sui Network specifically here.
BIP-32 and SLIP-0010 are both excellent standards on how key management works, and they both have extensive implementations across many languages. However, I struggle to find a good reading on why some constructions are needed and how they relate to the RFCs on different curves.</description>
    </item>
    
    <item>
      <title>All Things Commitments</title>
      <link>https://joywang.co/2022/12/05/2022-12-05-committments/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      <author>me@example.com (joy)</author>
      <guid>https://joywang.co/2022/12/05/2022-12-05-committments/</guid>
      <description>Examining vector and polynomial commitments. &amp;ldquo;A promise is made, a promise is kept.&amp;rdquo; How do we make commitments?
Making commitments is a two-step process. First, we make a promise: a committer publishes a value and it binds to the message without revealing it.
How do we know a promise is kept? Second, he can choose to reveal the message to a verifier, who can check if the message is indeed what he previously published.</description>
    </item>
    
  </channel>
</rss>
